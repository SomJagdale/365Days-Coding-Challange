You are given an array prices where prices[i] is the price of a given stock on the ith day.
You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.
Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

Solution 
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        vector<int> profit;
        profit.reserve(prices.size());
        int pro = 0;
        for(int i = 0; i<prices.size(); i++)
        {
            for(int j=i+1; j<prices.size(); j++)
            {
                pro = prices[j]-prices[i];
                if(pro>0)
                    profit.push_back(pro);
                else
                    break;
            }
        }
        profit.push_back(0);
        return *max_element(profit.begin(), profit.end());
    }
};

Performance 
Runtime 407 ms Beats 6.32%
Memory 131.4 MB Beats 5.2%
